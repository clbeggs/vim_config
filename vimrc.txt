syntax on
filetype on
filetype plugin on
set noerrorbells "No sounds when reaching EOF
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
set nu "line numbers
set nu rnu " Relative line numbers
set number relativenumber
set nowrap
set smartcase
set ignorecase
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile
set incsearch "While search you get results
set scrolloff=3 "Keep 3 lines while scrolling down
set colorcolumn=80 " highlights column to the right of screen
set foldmethod=indent
set foldlevelstart=99
set cursorline
let g:python3_host_prog="/home/epiphyte/.pyenv/versions/neovim/bin/python"


call plug#begin('~/.vim/plugged')
Plug 'lervag/vimtex'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'mbbill/undotree' "undo stuff
Plug 'lyuts/vim-rtags' "great for C++
Plug 'majutsushi/tagbar'
"Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'dense-analysis/ale'
Plug 'neovim/nvim-lspconfig'

"Plug 'sheerun/vim-polyglot'
"Plug 'tpope/vim-fugitive'
"Plug 'gu-fan/InstantRst'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }
"Plug 'JuliaEditorSupport/julia-vim'
Plug 'Yggdroot/indentLine'
Plug 'codehearts/mascara-vim'
Plug 'osyo-manga/vim-anzu'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'KeitaNakamura/tex-conceal.vim', {'for': 'tex'} " for VimPlug
Plug 'clbeggs/vim-unicoder'

" Colorschemes
Plug 'morhetz/gruvbox'
Plug 'sainnhe/gruvbox-material'
Plug 'sainnhe/edge'
Plug 'sainnhe/sonokai'
Plug 'arcticicestudio/nord-vim'
Plug 'hzchirs/vim-material'
Plug 'NLKNguyen/papercolor-theme'
Plug 'nightsense/carbonized'
Plug 'kuntau/ayu-vim' " Ayu colorscheme with italics
Plug 'cocopon/iceberg.vim'
Plug 'kaicataldo/material.vim', { 'branch': 'main' }
Plug 'tyrannicaltoucan/vim-deep-space'
call plug#end()


if (has('nvim'))
  let $NVIM_TUI_ENABLE_TRUE_COLOR = 1
endif

if empty(v:servername) && exists('*remote_startserver')
      call remote_startserver('VIM')
endif

" Cosmetics
set termguicolors
set background=light
colorscheme nord
let g:mascara_italic = [ 'Statement', 'Comment', 'ErrorMsg', 'Identifier', 'Type' ] " Comments, error messages, line numbers
let g:mascara_apply_at_startup = 1 " Apply Mascara @ startup

" linting
"let g:deoplete#enable_at_startup = 1
"let g:ale_completion_enabled = 1
"set omnifunc=ale#completion#OmniFunc
let g:ale_completion_autoimport = 1
let g:ale_fix_on_save = 1
let g:ale_linters_explicit = 1
" pyre is a linter, try and fix that
let g:ale_linters = {'python': ['pylint', 'flake8', 'mypy'], 'tex': ['texlab', 'chktex'], 'go': ['gofmt', 'golint'], 'cpp':['cppcheck', 'clangd', 'cpplint', 'clangtidy'], 'c':['clangd', 'clangtidy']}
let g:ale_fixers = {'*':['trim_whitespace'], 'python': ['yapf', 'autopep8', 'trim_whitespace', 'isort', 'remove_trailing_lines'], 'tex': ['latexindent']}
let g:ale_python_pylint_options = "--generated-members=numpy.*, torch.*"  " Some numpy members couldn't be found
let g:ale_tex_chktex_options = "-n 1 -n 8"   " -n NUM supresses warnings for that error
let g:ale_echo_msg_format = '%linter%: %s [%code%]'
let g:ale_set_balloons=0
let g:ale_hover_to_floating_preview=1
let g:ale_floating_preview=1

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)


" LaTeX
set conceallevel=2
let g:tex_conceal="abdgm"
set concealcursor="n"
let g:tex_flavor='latex'
let g:vimtex_complete_close_braces=1
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
let g:latex_view_general_viewer = 'zathura'
let g:vimtex_compiler_latexmk = { 'build_dir' : '','callback' : 1,'continuous' : 1,'executable' : 'latexmk','hooks' : [],'options' : ['-pdflatex', '-file-line-error','-synctex=1','-interaction=nonstopmode']}"
" Use <C-l> for trigger snippet expand.
" imap <C-l> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
"vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
"let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
"let g:coc_snippet_prev = '<c-k>'

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)


" Julia Latex
"let g:latex_to_unicode_tab = 1
"let g:latex_to_unicode_file_types = ".*"
"" For julia-vim, latex_to_unicode in insert mode
"inoremap <C-Tab> <C-X><C-O>
"set omnifunc=LaTeXtoUnicode#omnifunc

" Adding Inkscape figures to latex files
" https://github.com/gillescastel/inkscape-figures
inoremap <C-f> <Esc>: silent exec '.!inkscape-figures create "'.getline('.').'" "'.b:vimtex.root.'/figures/"'<CR><CR>:w<CR>
nnoremap <C-f> : silent exec '!inkscape-figures edit "'.b:vimtex.root.'/figures/" > /dev/null 2>&1 &'<CR><CR>:redraw!<CR>
inoremap <C-s> <Esc>: silent exec '.!inkscape-figures screenshot "'.b:vimtex.root.'/figures/"'<CR><CR>:w<CR>
" Run the wacom tablet area mapper c++ script
"au BufReadPost,BufNewFile *.tex silent execute '!/home/epiphyte/.config/polybar/test &'


" Airline Stuff
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
let g:airline_powerline_fonts = 1
let g:airline_section_a = airline#section#create_right(['  ', 'mode',''])
let g:airline_section_y = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_z = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'
let g:airline_section_x = '%{anzu#search_status()}'
let g:airline_section_error = ''
let g:airline_section_warning = ''
let g:airline_extensions = ['coc', 'wordcount', 'ale']
let g:airline#extensions#ale#enabled = 1
"let g:airline_theme = 'night_owl'

" Code
let g:python_highlight_space_errors = 0
let g:mkdp_browser = 'firefox'

" Toggle Tagbar
nmap T : TagbarToggle<CR>

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')


" Update signature help on jump placeholder.
autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

function! s:show_signature()
  call CocActionAsync('showSignatureHelp')
endfunction

noremap <silent> <C-g> :call <SID>show_signature()<CR>
nnoremap <silent> <C-g> :call <SID>show_signature()<CR>
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_signature()
  call CocActionAsync('showSignatureHelp')
endfunction

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction


" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()



"Allows rg to detect root, faster searching
if executable('rg')
    let g:rg_derive_root='true'
endif

" IndentLine
let g:indentLine_char = '∣'
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_first_char = '∣'
let g:indentLine_setConceal = 0
let g:indentLine_color_term=15
let g:indentLine_bgcolor_term=0
let g:indentLine_color_gui='#5e81ac'
let g:indentLine_bgcolor_gui='#2E3440'

let g:ctrlp_user_command = [ '.git/' , 'git --git-dir=%s/.git ls-files -oc --exclude-standard'] " help ignore things we dont want to search for
let mapleader = " " "Set leader key
let g:netrw_browse_split=2
let g:netrw_banner = 0
let g:netrw_winsize = 25
let g:ctrlp_use_caching = 0

" remove whitespace to left of line
nnoremap <leader>le :left<CR>
nnoremap <leader>n :noh<CR>

nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>
nnoremap <leader>u :UndotreeShow<CR>
nnoremap <leader>pv :wincmd v<bar> :Ex <bar> :vertical resize 30 <CR>
nnoremap <Leader>ps :Rg<SPACE>
nnoremap <silent> <Leader>+ :vertical resize +5<CR>
nnoremap <silent> <Leader>- :vertical resize -5<CR>

autocmd FileType python setlocal indentkeys-=<:>
autocmd FileType python setlocal indentkeys-=:
